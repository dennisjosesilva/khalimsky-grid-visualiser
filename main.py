from grid import interpolate, immerse, tikz_khalimsky_grid, tikz_interpolation
from string import Template
import numpy as np
import argparse 
import os

parser = argparse.ArgumentParser()

parser.add_argument("-l", "--pdflatex", help="Make it run pdf_latex", action="store_true")
parser.add_argument("-i", "--input_image", help="filename of the input image", type=str,
	default="./paper.txt")
parser.add_argument("-p", "--pdf_output", help="Directory to store the pdf generated by pdflatex, when executed.",
	default="./pdf_output/grid.pdf", type=str)
parser.add_argument("-t", "--tex_output", help="Directory to store .tex file generated by the program.",
	default="./grid.tex", type=str)
parser.add_argument("-s", "--step", help="Which khalimsky grid construction step, the program should perfom.", 
	default="immersion", choices=["interpolation", "immersion"])

args = parser.parse_args()


f = np.loadtxt(args.input_image, dtype=np.uint8)

tikz = None
if args.step == "interpolate":
	it = interpolate(f, np.max)
	tikz = tikz_interpolation(it)
elif args.step == "immersion":
	it = interpolate(f, np.max)
	im = immerse(it)
	tikz = tikz_khalimsky_grid(im)


with open(args.tex_output, "w") as f:
 	f.write(tikz)

if args.pdflatex:
	with open("tex-figure-temp/template.tex", "r") as t:
		template = Template(t.read())

		tex_output = args.tex_output
		if not tex_output.startswith("/") and not tex_output.startswith("~/"): ## It is not absulute path
			if tex_output.startswith("./"):
				tex_output = tex_output.replace("./", "../")
			else:
				tex_output = "../" + tex_output


		pdf_output = args.pdf_output
		if not pdf_output.startswith("/") and not pdf_output.startswith("~/"): ## It is not absulute path
			if pdf_output.startswith("./"):
				pdf_output = pdf_output.replace("./", "../")
			else:
				pdf_output = "../" + pdf_output

		pdfdir, pdf_filename = pdf_output.rsplit(sep="/", maxsplit=1)
		result_tex = template.substitute(tex_file=tex_output)
		gentex = f"{pdf_filename[:-4]}.tex"

		with open(f"tex-figure-temp/{gentex}", "w") as tt:
			tt.write(result_tex)


		os.system(f"cd tex-figure-temp; pdflatex -aux-directory=../aux_log -output-directory={pdfdir} -interaction=nonstopmode "
			f"-halt-on-error {gentex}; rm {gentex}")